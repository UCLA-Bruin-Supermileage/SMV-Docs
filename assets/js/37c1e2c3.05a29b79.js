"use strict";(self.webpackChunksmv_docs=self.webpackChunksmv_docs||[]).push([[8742],{8063:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"server/part-6-github","title":"GitHub Development Best Practices","description":"This document outlines the GitHub workflow and best practices for developing in the SMV repositories. Please follow this guide to ensure code consistency, maintainability, and deployment readiness.","source":"@site/docs/server/part-6-github.md","sourceDirName":"server","slug":"/server/part-6-github","permalink":"/docs/server/part-6-github","draft":false,"unlisted":false,"editUrl":"https://github.com/Howard-Z/SMV-Docs/blob/main/docs/server/part-6-github.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"SMV-API Development Guide","permalink":"/docs/server/part-5-dev"},"next":{"title":"Tailscale Access for Club Server","permalink":"/docs/server/part-5-tailscale"}}');var t=i(4848),s=i(8453);const o={sidebar_position:5},l="GitHub Development Best Practices",a={},c=[{value:"Branching Strategy",id:"branching-strategy",level:2},{value:"Workflow Overview",id:"workflow-overview",level:2},{value:"Deployment",id:"deployment",level:2},{value:"Tips for Contributors",id:"tips-for-contributors",level:2},{value:"Example Workflow",id:"example-workflow",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"github-development-best-practices",children:"GitHub Development Best Practices"})}),"\n",(0,t.jsx)(n.p,{children:"This document outlines the GitHub workflow and best practices for developing in the SMV repositories. Please follow this guide to ensure code consistency, maintainability, and deployment readiness."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"branching-strategy",children:"Branching Strategy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Main branch"})," is ",(0,t.jsx)(n.strong,{children:"protected"})," and ",(0,t.jsx)(n.strong,{children:"auto-deployed"}),".","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Only organization administrators can override protections."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["All development should be done on ",(0,t.jsx)(n.strong,{children:"feature branches"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Use the following naming convention for branches:"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"github-username/feature-name"}),"\nExample:\n",(0,t.jsx)(n.code,{children:"matthewt-123/server-docs"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"workflow-overview",children:"Workflow Overview"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Create a Feature Branch"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Always branch off of ",(0,t.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Use the proper naming convention."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Open a Pull Request (PR)"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Once your changes are ready for review, open a PR into ",(0,t.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Include a descriptive title and summary of the changes."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Automated Tests"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"On opening a PR, a GitHub Actions workflow will run to verify the project builds successfully."}),"\n",(0,t.jsx)(n.li,{children:"Ensure your code passes this check before requesting a review."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Code Review"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A team ",(0,t.jsx)(n.strong,{children:"lead"})," must review and approve the PR before merging."]}),"\n",(0,t.jsx)(n.li,{children:"Use inline comments to ask questions or request changes."}),"\n",(0,t.jsx)(n.li,{children:"Leads should review PRs promptly to keep development flowing."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Merge"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Only after all checks pass and a lead has approved, the PR can be merged into ",(0,t.jsx)(n.code,{children:"main"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Merging into ",(0,t.jsx)(n.code,{children:"main"})," will ",(0,t.jsx)(n.strong,{children:"automatically trigger deployment"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Do ",(0,t.jsx)(n.strong,{children:"not"})," commit directly to ",(0,t.jsx)(n.code,{children:"main"})," unless absolutely necessary and you have org admin privileges."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"tips-for-contributors",children:"Tips for Contributors"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Pull from ",(0,t.jsx)(n.code,{children:"main"})," frequently to avoid merge conflicts."]}),"\n",(0,t.jsx)(n.li,{children:"Write clean, modular code."}),"\n",(0,t.jsx)(n.li,{children:"Document your changes where appropriate with comments"}),"\n",(0,t.jsx)(n.li,{children:"Keep commits focused\u2014one feature or fix per commit when possible."}),"\n",(0,t.jsx)(n.li,{children:"Test your code locally before opening a PR."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"example-workflow",children:"Example Workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Starting a new feature\ngit checkout main\ngit pull\ngit checkout -b matthewt-123/start-stop-api\n\n# Commit changes\ngit add .\ngit commit -m "Add responsive navbar for mobile layout"\ngit push -u origin matthewt-123/start-stop-api\n\n# Open PR via GitHub UI\n\n# UCLA Bruin Supermileage GitHub Repositories\n\nThis document lists and describes the key repositories under the [UCLA-Bruin-Supermileage](https://github.com/UCLA-Bruin-Supermileage) organization. All repositories follow our code review rules unless otherwise stated.\n\n---\n\n## Active Repositories\n\n### [SMV-API](https://github.com/UCLA-Bruin-Supermileage/SMV-API)\n- **Description**: Backend API built with Django for storing and serving telemetry and sensor data from the vehicle.\n- **CI/CD**: Enabled \u2013 Automatically builds and deploys Docker image on merge to `main`.\n- **Branch Protection**: `master` is push protected and deployment-triggering.\n- **Review Requirement**: PRs must be reviewed before merge.\n\n---\n\n### [SMV-Website](https://github.com/UCLA-Bruin-Supermileage/SMV-Website)\n- **Description**: Frontend website for displaying sensor data, maps, and team info; built with Next.js.\n- **CI/CD**: Enabled \u2013 Automatically builds and deploys Docker image on merge to `main`.\n- **Branch Protection**: `main` is push protected and deployment-triggering.\n- **Review Requirement**: PRs must be reviewed before merge.\n\n---\n\n### [SMV-Docs](https://github.com/UCLA-Bruin-Supermileage/SMV-Docs)\n- **Description**: Docusaurus documentation site containing team guides, development resources, and infrastructure docs.\n- **CI/CD**: Enabled \u2013 Builds and deploys site to GitHub Pages on merge to `main`.\n- **Branch Protection**: `main` is push protected.\n  - `gh-pages` is the live site. Never directly modify this branch.\n- **Review Requirement**: PRs must be reviewed before merge.\n\n---\n\n## Library & Firmware Repositories\n\n### [UCLA-SMV-CAN](https://github.com/UCLA-Bruin-Supermileage/UCLA-SMV-CAN)\n- **Description**: C++ CAN library used by embedded microcontrollers in the SMV system for inter-board communication.\n- **CI/CD**: Not enabled \u2013 No automated testing or deployment.\n- **Branch Protection**: None.\n- **Review Requirement**: PRs must still be reviewed before merge. Code quality and consistency should be upheld.\n\n\n\n\n\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);